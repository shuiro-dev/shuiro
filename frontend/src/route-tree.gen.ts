/* prettier-ignore-start */

/* eslint-disable unicorn/no-abusive-eslint-disable */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router"

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as TeacherImport } from "./routes/_teacher"
import { Route as StudentImport } from "./routes/_student"
import { Route as StudentdashboardIndexImport } from "./routes/_student/(dashboard)/index"
import { Route as StudentProblemsProblemIdRouteImport } from "./routes/_student/problems/$problemId/route"
import { Route as TeacherAdmindashboardIndexImport } from "./routes/_teacher/admin/(dashboard)/index"
import { Route as TeacherAdminSubmissionsSubmissionIdRouteImport } from "./routes/_teacher/admin/submissions/$submissionId/route"
import { Route as TeacherAdminProblemsProblemIdIndexImport } from "./routes/_teacher/admin/problems/$problemId/index"

// Create Virtual Routes

const StudentProblemsIndexLazyImport = createFileRoute("/_student/problems/")()
const TeacherAdminSubmissionsIndexLazyImport = createFileRoute(
  "/_teacher/admin/submissions/",
)()
const TeacherAdminProblemsIndexLazyImport = createFileRoute(
  "/_teacher/admin/problems/",
)()

// Create/Update Routes

const TeacherRoute = TeacherImport.update({
  id: "/_teacher",
  getParentRoute: () => rootRoute,
} as any)

const StudentRoute = StudentImport.update({
  id: "/_student",
  getParentRoute: () => rootRoute,
} as any)

const StudentProblemsIndexLazyRoute = StudentProblemsIndexLazyImport.update({
  id: "/problems/",
  path: "/problems/",
  getParentRoute: () => StudentRoute,
} as any).lazy(() =>
  import("./routes/_student/problems/index.lazy").then((d) => d.Route),
)

const StudentdashboardIndexRoute = StudentdashboardIndexImport.update({
  id: "/(dashboard)/",
  path: "/",
  getParentRoute: () => StudentRoute,
} as any).lazy(() =>
  import("./routes/_student/(dashboard)/index.lazy").then((d) => d.Route),
)

const StudentProblemsProblemIdRouteRoute =
  StudentProblemsProblemIdRouteImport.update({
    id: "/problems/$problemId",
    path: "/problems/$problemId",
    getParentRoute: () => StudentRoute,
  } as any).lazy(() =>
    import("./routes/_student/problems/$problemId/route.lazy").then(
      (d) => d.Route,
    ),
  )

const TeacherAdminSubmissionsIndexLazyRoute =
  TeacherAdminSubmissionsIndexLazyImport.update({
    id: "/admin/submissions/",
    path: "/admin/submissions/",
    getParentRoute: () => TeacherRoute,
  } as any).lazy(() =>
    import("./routes/_teacher/admin/submissions/index.lazy").then(
      (d) => d.Route,
    ),
  )

const TeacherAdminProblemsIndexLazyRoute =
  TeacherAdminProblemsIndexLazyImport.update({
    id: "/admin/problems/",
    path: "/admin/problems/",
    getParentRoute: () => TeacherRoute,
  } as any).lazy(() =>
    import("./routes/_teacher/admin/problems/index.lazy").then((d) => d.Route),
  )

const TeacherAdmindashboardIndexRoute = TeacherAdmindashboardIndexImport.update(
  {
    id: "/admin/(dashboard)/",
    path: "/admin/",
    getParentRoute: () => TeacherRoute,
  } as any,
).lazy(() =>
  import("./routes/_teacher/admin/(dashboard)/index.lazy").then((d) => d.Route),
)

const TeacherAdminSubmissionsSubmissionIdRouteRoute =
  TeacherAdminSubmissionsSubmissionIdRouteImport.update({
    id: "/admin/submissions/$submissionId",
    path: "/admin/submissions/$submissionId",
    getParentRoute: () => TeacherRoute,
  } as any).lazy(() =>
    import("./routes/_teacher/admin/submissions/$submissionId/route.lazy").then(
      (d) => d.Route,
    ),
  )

const TeacherAdminProblemsProblemIdIndexRoute =
  TeacherAdminProblemsProblemIdIndexImport.update({
    id: "/admin/problems/$problemId/",
    path: "/admin/problems/$problemId/",
    getParentRoute: () => TeacherRoute,
  } as any).lazy(() =>
    import("./routes/_teacher/admin/problems/$problemId/index.lazy").then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_student": {
      id: "/_student"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof StudentImport
      parentRoute: typeof rootRoute
    }
    "/_teacher": {
      id: "/_teacher"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof TeacherImport
      parentRoute: typeof rootRoute
    }
    "/_student/problems/$problemId": {
      id: "/_student/problems/$problemId"
      path: "/problems/$problemId"
      fullPath: "/problems/$problemId"
      preLoaderRoute: typeof StudentProblemsProblemIdRouteImport
      parentRoute: typeof StudentImport
    }
    "/_student/(dashboard)/": {
      id: "/_student/(dashboard)/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof StudentdashboardIndexImport
      parentRoute: typeof StudentImport
    }
    "/_student/problems/": {
      id: "/_student/problems/"
      path: "/problems"
      fullPath: "/problems"
      preLoaderRoute: typeof StudentProblemsIndexLazyImport
      parentRoute: typeof StudentImport
    }
    "/_teacher/admin/submissions/$submissionId": {
      id: "/_teacher/admin/submissions/$submissionId"
      path: "/admin/submissions/$submissionId"
      fullPath: "/admin/submissions/$submissionId"
      preLoaderRoute: typeof TeacherAdminSubmissionsSubmissionIdRouteImport
      parentRoute: typeof TeacherImport
    }
    "/_teacher/admin/(dashboard)/": {
      id: "/_teacher/admin/(dashboard)/"
      path: "/admin"
      fullPath: "/admin"
      preLoaderRoute: typeof TeacherAdmindashboardIndexImport
      parentRoute: typeof TeacherImport
    }
    "/_teacher/admin/problems/": {
      id: "/_teacher/admin/problems/"
      path: "/admin/problems"
      fullPath: "/admin/problems"
      preLoaderRoute: typeof TeacherAdminProblemsIndexLazyImport
      parentRoute: typeof TeacherImport
    }
    "/_teacher/admin/submissions/": {
      id: "/_teacher/admin/submissions/"
      path: "/admin/submissions"
      fullPath: "/admin/submissions"
      preLoaderRoute: typeof TeacherAdminSubmissionsIndexLazyImport
      parentRoute: typeof TeacherImport
    }
    "/_teacher/admin/problems/$problemId/": {
      id: "/_teacher/admin/problems/$problemId/"
      path: "/admin/problems/$problemId"
      fullPath: "/admin/problems/$problemId"
      preLoaderRoute: typeof TeacherAdminProblemsProblemIdIndexImport
      parentRoute: typeof TeacherImport
    }
  }
}

// Create and export the route tree

interface StudentRouteChildren {
  StudentProblemsProblemIdRouteRoute: typeof StudentProblemsProblemIdRouteRoute
  StudentdashboardIndexRoute: typeof StudentdashboardIndexRoute
  StudentProblemsIndexLazyRoute: typeof StudentProblemsIndexLazyRoute
}

const StudentRouteChildren: StudentRouteChildren = {
  StudentProblemsProblemIdRouteRoute: StudentProblemsProblemIdRouteRoute,
  StudentdashboardIndexRoute: StudentdashboardIndexRoute,
  StudentProblemsIndexLazyRoute: StudentProblemsIndexLazyRoute,
}

const StudentRouteWithChildren =
  StudentRoute._addFileChildren(StudentRouteChildren)

interface TeacherRouteChildren {
  TeacherAdminSubmissionsSubmissionIdRouteRoute: typeof TeacherAdminSubmissionsSubmissionIdRouteRoute
  TeacherAdmindashboardIndexRoute: typeof TeacherAdmindashboardIndexRoute
  TeacherAdminProblemsIndexLazyRoute: typeof TeacherAdminProblemsIndexLazyRoute
  TeacherAdminSubmissionsIndexLazyRoute: typeof TeacherAdminSubmissionsIndexLazyRoute
  TeacherAdminProblemsProblemIdIndexRoute: typeof TeacherAdminProblemsProblemIdIndexRoute
}

const TeacherRouteChildren: TeacherRouteChildren = {
  TeacherAdminSubmissionsSubmissionIdRouteRoute:
    TeacherAdminSubmissionsSubmissionIdRouteRoute,
  TeacherAdmindashboardIndexRoute: TeacherAdmindashboardIndexRoute,
  TeacherAdminProblemsIndexLazyRoute: TeacherAdminProblemsIndexLazyRoute,
  TeacherAdminSubmissionsIndexLazyRoute: TeacherAdminSubmissionsIndexLazyRoute,
  TeacherAdminProblemsProblemIdIndexRoute:
    TeacherAdminProblemsProblemIdIndexRoute,
}

const TeacherRouteWithChildren =
  TeacherRoute._addFileChildren(TeacherRouteChildren)

export interface FileRoutesByFullPath {
  "": typeof TeacherRouteWithChildren
  "/problems/$problemId": typeof StudentProblemsProblemIdRouteRoute
  "/": typeof StudentdashboardIndexRoute
  "/problems": typeof StudentProblemsIndexLazyRoute
  "/admin/submissions/$submissionId": typeof TeacherAdminSubmissionsSubmissionIdRouteRoute
  "/admin": typeof TeacherAdmindashboardIndexRoute
  "/admin/problems": typeof TeacherAdminProblemsIndexLazyRoute
  "/admin/submissions": typeof TeacherAdminSubmissionsIndexLazyRoute
  "/admin/problems/$problemId": typeof TeacherAdminProblemsProblemIdIndexRoute
}

export interface FileRoutesByTo {
  "": typeof TeacherRouteWithChildren
  "/problems/$problemId": typeof StudentProblemsProblemIdRouteRoute
  "/": typeof StudentdashboardIndexRoute
  "/problems": typeof StudentProblemsIndexLazyRoute
  "/admin/submissions/$submissionId": typeof TeacherAdminSubmissionsSubmissionIdRouteRoute
  "/admin": typeof TeacherAdmindashboardIndexRoute
  "/admin/problems": typeof TeacherAdminProblemsIndexLazyRoute
  "/admin/submissions": typeof TeacherAdminSubmissionsIndexLazyRoute
  "/admin/problems/$problemId": typeof TeacherAdminProblemsProblemIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/_student": typeof StudentRouteWithChildren
  "/_teacher": typeof TeacherRouteWithChildren
  "/_student/problems/$problemId": typeof StudentProblemsProblemIdRouteRoute
  "/_student/(dashboard)/": typeof StudentdashboardIndexRoute
  "/_student/problems/": typeof StudentProblemsIndexLazyRoute
  "/_teacher/admin/submissions/$submissionId": typeof TeacherAdminSubmissionsSubmissionIdRouteRoute
  "/_teacher/admin/(dashboard)/": typeof TeacherAdmindashboardIndexRoute
  "/_teacher/admin/problems/": typeof TeacherAdminProblemsIndexLazyRoute
  "/_teacher/admin/submissions/": typeof TeacherAdminSubmissionsIndexLazyRoute
  "/_teacher/admin/problems/$problemId/": typeof TeacherAdminProblemsProblemIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ""
    | "/problems/$problemId"
    | "/"
    | "/problems"
    | "/admin/submissions/$submissionId"
    | "/admin"
    | "/admin/problems"
    | "/admin/submissions"
    | "/admin/problems/$problemId"
  fileRoutesByTo: FileRoutesByTo
  to:
    | ""
    | "/problems/$problemId"
    | "/"
    | "/problems"
    | "/admin/submissions/$submissionId"
    | "/admin"
    | "/admin/problems"
    | "/admin/submissions"
    | "/admin/problems/$problemId"
  id:
    | "__root__"
    | "/_student"
    | "/_teacher"
    | "/_student/problems/$problemId"
    | "/_student/(dashboard)/"
    | "/_student/problems/"
    | "/_teacher/admin/submissions/$submissionId"
    | "/_teacher/admin/(dashboard)/"
    | "/_teacher/admin/problems/"
    | "/_teacher/admin/submissions/"
    | "/_teacher/admin/problems/$problemId/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  StudentRoute: typeof StudentRouteWithChildren
  TeacherRoute: typeof TeacherRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  StudentRoute: StudentRouteWithChildren,
  TeacherRoute: TeacherRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_student",
        "/_teacher"
      ]
    },
    "/_student": {
      "filePath": "_student.tsx",
      "children": [
        "/_student/problems/$problemId",
        "/_student/(dashboard)/",
        "/_student/problems/"
      ]
    },
    "/_teacher": {
      "filePath": "_teacher.tsx",
      "children": [
        "/_teacher/admin/submissions/$submissionId",
        "/_teacher/admin/(dashboard)/",
        "/_teacher/admin/problems/",
        "/_teacher/admin/submissions/",
        "/_teacher/admin/problems/$problemId/"
      ]
    },
    "/_student/problems/$problemId": {
      "filePath": "_student/problems/$problemId/route.tsx",
      "parent": "/_student"
    },
    "/_student/(dashboard)/": {
      "filePath": "_student/(dashboard)/index.tsx",
      "parent": "/_student"
    },
    "/_student/problems/": {
      "filePath": "_student/problems/index.lazy.tsx",
      "parent": "/_student"
    },
    "/_teacher/admin/submissions/$submissionId": {
      "filePath": "_teacher/admin/submissions/$submissionId/route.tsx",
      "parent": "/_teacher"
    },
    "/_teacher/admin/(dashboard)/": {
      "filePath": "_teacher/admin/(dashboard)/index.tsx",
      "parent": "/_teacher"
    },
    "/_teacher/admin/problems/": {
      "filePath": "_teacher/admin/problems/index.lazy.tsx",
      "parent": "/_teacher"
    },
    "/_teacher/admin/submissions/": {
      "filePath": "_teacher/admin/submissions/index.lazy.tsx",
      "parent": "/_teacher"
    },
    "/_teacher/admin/problems/$problemId/": {
      "filePath": "_teacher/admin/problems/$problemId/index.tsx",
      "parent": "/_teacher"
    }
  }
}
ROUTE_MANIFEST_END */
