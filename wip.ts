/* prettier-ignore-start */

/* eslint-disable unicorn/no-abusive-eslint-disable */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router"

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as ProblemsProblemIdRouteImport } from "./routes/problems/$problemId/route"
import { Route as AdminProblemsKannriImport } from "./routes/admin/problems/kannri"

// Create Virtual Routes

const IndexLazyImport = createFileRoute("/")()
const ProblemsIndexLazyImport = createFileRoute("/problems/")()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route))

const ProblemsIndexLazyRoute = ProblemsIndexLazyImport.update({
  id: "/problems/",
  path: "/problems/",
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import("./routes/problems/index.lazy").then((d) => d.Route),
)

const ProblemsProblemIdRouteRoute = ProblemsProblemIdRouteImport.update({
  id: "/problems/$problemId",
  path: "/problems/$problemId",
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import("./routes/problems/$problemId/route.lazy").then((d) => d.Route),
)

const AdminProblemsKannriRoute = AdminProblemsKannriImport.update({
  id: "/admin/problems/kannri",
  path: "/admin/problems/kannri",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    "/problems/$problemId": {
      id: "/problems/$problemId"
      path: "/problems/$problemId"
      fullPath: "/problems/$problemId"
      preLoaderRoute: typeof ProblemsProblemIdRouteImport
      parentRoute: typeof rootRoute
    }
    "/problems/": {
      id: "/problems/"
      path: "/problems"
      fullPath: "/problems"
      preLoaderRoute: typeof ProblemsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    "/admin/problems/kannri": {
      id: "/admin/problems/kannri"
      path: "/admin/problems/kannri"
      fullPath: "/admin/problems/kannri"
      preLoaderRoute: typeof AdminProblemsKannriImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute
  "/problems/$problemId": typeof ProblemsProblemIdRouteRoute
  "/problems": typeof ProblemsIndexLazyRoute
  "/admin/problems/kannri": typeof AdminProblemsKannriRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute
  "/problems/$problemId": typeof ProblemsProblemIdRouteRoute
  "/problems": typeof ProblemsIndexLazyRoute
  "/admin/problems/kannri": typeof AdminProblemsKannriRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexLazyRoute
  "/problems/$problemId": typeof ProblemsProblemIdRouteRoute
  "/problems/": typeof ProblemsIndexLazyRoute
  "/admin/problems/kannri": typeof AdminProblemsKannriRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/problems/$problemId"
    | "/problems"
    | "/admin/problems/kannri"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/problems/$problemId" | "/problems" | "/admin/problems/kannri"
  id:
    | "__root__"
    | "/"
    | "/problems/$problemId"
    | "/problems/"
    | "/admin/problems/kannri"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ProblemsProblemIdRouteRoute: typeof ProblemsProblemIdRouteRoute
  ProblemsIndexLazyRoute: typeof ProblemsIndexLazyRoute
  AdminProblemsKannriRoute: typeof AdminProblemsKannriRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ProblemsProblemIdRouteRoute: ProblemsProblemIdRouteRoute,
  ProblemsIndexLazyRoute: ProblemsIndexLazyRoute,
  AdminProblemsKannriRoute: AdminProblemsKannriRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/problems/$problemId",
        "/problems/",
        "/admin/problems/kannri"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/problems/$problemId": {
      "filePath": "problems/$problemId/route.tsx"
    },
    "/problems/": {
      "filePath": "problems/index.lazy.tsx"
    },
    "/admin/problems/kannri": {
      "filePath": "admin/problems/kannri.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
